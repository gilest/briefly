upstream briefly {
  # for UNIX domain socket setups:
  server unix:///home/web/briefly/current/tmp/sockets/unicorn.sock fail_timeout=0;
}

server {
  listen 80;
  server_name www.briefly.co.nz;
  return 301 http://briefly.co.nz$request_uri;
}

server {
  listen 80; # for Linux

  client_max_body_size 4G;
  server_name briefly.co.nz api.briefly.co.nz;

  keepalive_timeout 5;

  root /home/web/briefly/current/public;
  access_log /home/web/briefly/current/log/nginx.access.log;
  error_log /home/web/briefly/current/log/nginx.error.log;

  # Prefer to serve static files directly from nginx to avoid unnecessary
  # data copies from the application server.
  #
  try_files $uri/index.html $uri.html $uri @app;

  location ~ ^/assets/ {
    expires 1y;
    add_header Cache-Control public;

    add_header ETag "";
    break;
  }

  location @app {
    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    proxy_pass http://briefly;
  }

  # Rails error pages
  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root /home/web/briefly/current/public;
  }
}